from ...doc import *

cuBLAS_extension = [
# 2.8.1. cublas<t>geam()
  func_decl( [ "cublasSgeam", "cublasDgeam", "cublasCgeam", "cublasZgeam" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('transa', PASSBYVALUE, INOUT_IN ),
               parm_def('transb', PASSBYVALUE, INOUT_IN ),
               parm_def('m', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('alpha', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('B', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('ldb', PASSBYVALUE, INOUT_IN ),
               parm_def('beta', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN ),
               parm_def('C', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.2. cublas<t>dgmm()
  func_decl( [ "cublasSdgmm", "cublasDdgmm", "cublasCdgmm", "cublasZdgmm" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('mode', PASSBYVALUE, INOUT_IN ),
               parm_def('m', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('x', [ MEMORY_DEVICE, VECTOR, 'n', 'incx'], INOUT_IN ),
               parm_def('incx', PASSBYVALUE, INOUT_IN ),
               parm_def('C', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.3. cublas<t>getrfBatched()
  func_decl( [ "cublasSgetrfBatched", "cublasDgetrfBatched", "cublasCgetrfBatched", "cublasZgetrfBatched" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('P', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('info', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('batchSize', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.4. cublas<t>getrsBatched()
  func_decl( [ "cublasSgetrsBatched", "cublasDgetrsBatched", "cublasCgetrsBatched", "cublasZgetrsBatched" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('trans', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('nrhs', PASSBYVALUE, INOUT_IN ),
               parm_def('Aarray', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('devIpiv', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('Barray', [ MEMORY_DEVICE, VECTOR ], INOUT_INOUT ),
               parm_def('ldb', PASSBYVALUE, INOUT_IN ),
               parm_def('info', [ MEMORY_HOST, SCALAR ], INOUT_OUT ),
               parm_def('batchSize', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.5. cublas<t>getriBatched()
  func_decl( [ "cublasSgetriBatched", "cublasDgetriBatched", "cublasCgetriBatched", "cublasZgetriBatched" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('P', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('C', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ),
               parm_def('info', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('batchSize', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.6. cublas<t>matinvBatched()
  func_decl( [ "cublasSmatinvBatched", "cublasDmatinvBatched", "cublasCmatinvBatched", "cublasZmatinvBatched" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('Ainv', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('lda_inv', PASSBYVALUE, INOUT_IN ),
               parm_def('info', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('batchSize', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.7. cublas<t>geqrfBatched()
  func_decl( [ "cublasSgeqrfBatched", "cublasDgeqrfBatched", "cublasCgeqrfBatched", "cublasZgeqrfBatched" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('m', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('Aarray', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('TauArray', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('info', [ MEMORY_HOST, SCALAR ], INOUT_OUT ),
               parm_def('batchSize', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.8. cublas<t>gelsBatched()
  func_decl( [ "cublasSgelsBatched", "cublasDgelsBatched", "cublasCgelsBatched", "cublasZgelsBatched" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('trans', PASSBYVALUE, INOUT_IN ),
               parm_def('m', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('nrhs', PASSBYVALUE, INOUT_IN ),
               parm_def('Aarray', [ MEMORY_DEVICE, VECTOR ], INOUT_INOUT ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('Carray', [ MEMORY_DEVICE, VECTOR ], INOUT_INOUT ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ),
               parm_def('info', [ MEMORY_HOST, SCALAR ], INOUT_OUT ),
               parm_def('devInfoArray', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('batchSize', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.9. cublas<t>tpttr()
  func_decl( [ "cublasStpttr", "cublasDtpttr", "cublasCtpttr", "cublasZtpttr" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('uplo', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('AP', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.10. cublas<t>trttp()
  func_decl( [ "cublasStrttp", "cublasDtrttp", "cublasCtrttp", "cublasZtrttp" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('uplo', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('AP', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ) ] ),

# 2.8.11. cublas<t>gemmEx()
  func_decl( [ "cublasSgemmEx", "cublasCgemmEx" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('transa', PASSBYVALUE, INOUT_IN ),
               parm_def('transb', PASSBYVALUE, INOUT_IN ),
               parm_def('m', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('k', PASSBYVALUE, INOUT_IN ),
               parm_def('alpha', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('Atype', PASSBYVALUE, INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('B', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT ),
               parm_def('Btype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldb', PASSBYVALUE, INOUT_IN ),
               parm_def('beta', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN ),
               parm_def('C', [ MEMORY_DEVICE, VECTOR ], INOUT_INOUT ),
               parm_def('Ctype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.12. cublasGemmEx()
  func_decl( "cublasGemmEx",
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('transa', PASSBYVALUE, INOUT_IN ),
               parm_def('transb', PASSBYVALUE, INOUT_IN ),
               parm_def('m', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('k', PASSBYVALUE, INOUT_IN ),
               parm_def('alpha', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN, { "typedep" : "computeType" } ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT, { "typedep" : "Atype" } ),
               parm_def('Atype', PASSBYVALUE, INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('B', [ MEMORY_DEVICE, VECTOR ], INOUT_OUT, { "typedep" : "Btype" } ),
               parm_def('Btype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldb', PASSBYVALUE, INOUT_IN ),
               parm_def('beta', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN, { "typedep" : "computeType" } ),
               parm_def('C', [ MEMORY_DEVICE, VECTOR ], INOUT_INOUT, { "typedep" : "Ctype" } ),
               parm_def('Ctype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ),
               parm_def('computeType', PASSBYVALUE, INOUT_IN ),
               parm_def('algo', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.13. cublasGemmBatchedEx()
  func_decl( "cublasGemmBatchedEx",
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('transa', PASSBYVALUE, INOUT_IN ),
               parm_def('transb', PASSBYVALUE, INOUT_IN ),
               parm_def('m', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('k', PASSBYVALUE, INOUT_IN ),
               parm_def('alpha', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN, { "typedep" : "computeType" } ),
               parm_def('Aarray', [ MEMORY_DEVICE, VECTOR ], INOUT_IN, { "typedep" : "Atype" } ),
               parm_def('Atype', PASSBYVALUE, INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('Barray', [ MEMORY_DEVICE, VECTOR ], INOUT_IN, { "typedep" : "Btype" } ),
               parm_def('Btype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldb', PASSBYVALUE, INOUT_IN ),
               parm_def('beta', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN, { "typedep" : "computeType" } ),
               parm_def('Carray', [ MEMORY_DEVICE, VECTOR ], INOUT_INOUT, { "typedep" : "Ctype" } ),
               parm_def('Ctype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ),
               parm_def('batchCount', PASSBYVALUE, INOUT_IN ),
               parm_def('computeType', PASSBYVALUE, INOUT_IN ),
               parm_def('algo', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.14. cublasGemmStridedBatchedEx()
  func_decl( "cublasGemmStridedBatchedEx",
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('transa', PASSBYVALUE, INOUT_IN ),
               parm_def('transb', PASSBYVALUE, INOUT_IN ),
               parm_def('m', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('k', PASSBYVALUE, INOUT_IN ),
               parm_def('alpha', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN, { "typedep" : "computeType" } ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_IN, { "typedep" : "Atype" } ),
               parm_def('Atype', PASSBYVALUE, INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('strideA', PASSBYVALUE, INOUT_IN ),
               parm_def('B', [ MEMORY_DEVICE, VECTOR ], INOUT_IN, { "typedep" : "Btype" } ),
               parm_def('Btype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldb', PASSBYVALUE, INOUT_IN ),
               parm_def('strideB', PASSBYVALUE, INOUT_IN ),
               parm_def('beta', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN, { "typedep" : "computeType" } ),
               parm_def('C', [ MEMORY_DEVICE, VECTOR ], INOUT_INOUT, { "typedep" : "Ctype" } ),
               parm_def('Ctype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ),
               parm_def('strideC', PASSBYVALUE, INOUT_IN ),
               parm_def('batchCount', PASSBYVALUE, INOUT_IN ),
               parm_def('computeType', PASSBYVALUE, INOUT_IN ),
               parm_def('algo', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.15. cublasCsyrkEx()
# 2.8.16. cublasCsyrk3mEx()
# 2.8.17. cublasCherkEx()
# 2.8.18. cublasCherk3mEx()
  func_decl( [ "cublasCsyrkEx", "cublasCsyrk3mEx", "cublasCherkEx", "cublasCherk3mEx" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('uplo', PASSBYVALUE, INOUT_IN ),
               parm_def('trans', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('k', PASSBYVALUE, INOUT_IN ),
               parm_def('alpha', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN ),
               parm_def('A', [ MEMORY_DEVICE, VECTOR ], INOUT_IN ), # typedep: Atype
               parm_def('Atype', PASSBYVALUE, INOUT_IN ),
               parm_def('lda', PASSBYVALUE, INOUT_IN ),
               parm_def('beta', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN ),
               parm_def('C', [ MEMORY_DEVICE, VECTOR ], INOUT_INOUT ), # typedep: Ctype
               parm_def('Ctype', PASSBYVALUE, INOUT_IN ),
               parm_def('ldc', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.19. cublasNrm2Ex() -- requires resulttype on INOUT_OUT
#  func_decl( [ "cublasNrm2Ex" ],
#             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
#               parm_def('n', PASSBYVALUE, INOUT_IN ),
#               parm_def('x', [ MEMORY_DEVICE, VECTOR, 'n', 'incx'], INOUT_IN, { "typedep" : "xType" } ),
#               parm_def('xType', PASSBYVALUE, INOUT_IN ),
#               parm_def('incx', PASSBYVALUE, INOUT_IN ),
#               parm_def('result', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_OUT, { "typedep" : "resultType" } ),
#               parm_def('resultType', PASSBYVALUE, INOUT_IN ),
#               parm_def('executionType', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.20. cublasAxpyEx()
  func_decl( [ "cublasAxpyEx" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('alpha', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN, { "typedep" : "alphaType" } ),
               parm_def('alphaType', PASSBYVALUE, INOUT_IN ), # different in spec
               parm_def('x', [ MEMORY_DEVICE, VECTOR, 'n', 'incx'], INOUT_IN, { "typedep" : "xType" } ),
               parm_def('xType', PASSBYVALUE, INOUT_IN ),
               parm_def('incx', PASSBYVALUE, INOUT_IN ),
               parm_def('y', [ MEMORY_DEVICE, VECTOR, 'n', 'incy'], INOUT_INOUT, { "typedep" : "yType" } ),
               parm_def('yType', PASSBYVALUE, INOUT_IN ),
               parm_def('incy', PASSBYVALUE, INOUT_IN ),
               parm_def('executiontype', PASSBYVALUE, INOUT_IN ) ] ),

# 2.8.21. cublasDotEx() -- requires resulttype on INOUT_OUT

# 2.8.22. cublasScalEx()
  func_decl( [ "cublasScalEx" ],
             [ parm_def('handle', PASSBYVALUE, INOUT_IN ),
               parm_def('n', PASSBYVALUE, INOUT_IN ),
               parm_def('alpha', [ MEMORY_HoD_CUBLASPOINTERMODE, SCALAR ], INOUT_IN, { "typedep" : "alphaType" } ),
               parm_def('alphaType', PASSBYVALUE, INOUT_IN ), # different in spec
               parm_def('x', [ MEMORY_DEVICE, VECTOR, 'n', 'incx'], INOUT_IN, { "typedep" : "xType" } ),
               parm_def('xType', PASSBYVALUE, INOUT_IN ),
               parm_def('incx', PASSBYVALUE, INOUT_IN ),
               parm_def('executionType', PASSBYVALUE, INOUT_IN ) ] ),

]
